package nids;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Proj {
	
    File file_name;
    
    private static final String WELCOME_STRING =
            "\n**************************   Welcome   ***************************\n"
    +"\n***************** ApplicationName: LockedMe.com *****************\n"+
                    "\n*********************** Nidhi Lunagariya ************************\n";

    private static final String MAIN_MENU_STRING =
            "\nMain Menu - Choose your option: \n"+
                    "1 -> Get file names in ascending order\n"+
                    "2 -> Display the user interface\n"+
                    "3 -> Exit Program";

    private static final String NESTED_MENU_STRING =
            "   \nChoose the operation to do: \n"+
                    "   1 -> Add a file\n"+
                    "   2 -> Delete a file\n"+
                    "   3 -> Search a file\n"+
                    "   4 -> GoBack to Main Menu";

    public Proj() {
            file_name = new File("C:\\Users\\admin\\JavaProject\\");
        if (!file_name.exists())
            file_name.mkdirs();
        
    }
    
    //for nested menu
    void showNestedMenu() {
        System.out.println(NESTED_MENU_STRING);
        try{
            Scanner scanner = new Scanner(System.in);
            char[] choose_value = scanner.nextLine().toLowerCase().trim().toCharArray();
            char option = choose_value[0];

            switch (option){
                case '1' : {
                    System.out.print("Please Enter a File Name you want to add : ");
                    String fname = scanner.next().trim().toLowerCase();
                    addFile(fname);
                    break;
                }
                case '2' : {
                    System.out.print("Please Enter a File Name you want to delete : ");
                    String fname = scanner.next().trim();
                    deleteFile(fname);
                    break;
                }
                case '3' : {
                    System.out.print("Please Enter a File Name you want to search : ");
                    String fname = scanner.next().trim();
                    searchFile(fname);
                    break;
                }
                case '4' : {
                    System.out.println("GoBack to Main Menu");
                    showMainMenu();
                    break;
                }
                default : System.out.println("Please Enter 1, 2, 3 or 4");
            }
            showNestedMenu();
        }
        catch (Exception e){
            System.out.println("Please enter 1, 2, 3 or 4");
            showNestedMenu();
        }
    }

    //display files from directory
    void showFilesAscendingOrder() {
    	if (file_name.list().length==0)
    		System.out.println("The folder is empty");
    	else {
    		File[] files = file_name.listFiles();
    		Arrays.sort(files, new Comparator()
    		{
    			@Override
    			public int compare(Object f1, Object f2) {
    				return ((File) f1).getName().compareTo(((File) f2).getName());
    			}
    		});
    		
    		System.out.println("\nSorting by name..\n");
    		//  print the file name in accending order.
    		for(File file:files)
    		{
    			System.out.println(file.getName());
    		}
    		
    	}
    }

    //add option
    void addFile(String fname) throws IOException {
        File file_path = new File(file_name +"/"+fname);
        String[] list = file_name.list();
        for (String file: list) {
            if (fname.equalsIgnoreCase(file)) {
                System.out.println("File " + fname + " already exists at " + file_name);
                return;
            }
        }
        file_path.createNewFile();
        System.out.println("File "+fname+" added to "+ file_name);
    }

    //delete option
    void deleteFile(String fname) {
        File file_path = new File(file_name +"/"+fname);
        String[] list = file_name.list();
        for (String file: list) {
            if (fname.equals(file) && file_path.delete()) {
                System.out.println("File " + fname + " deleted from " + file_name);
                return;
            }
        }
        System.out.println("FILE NOT FOUND (FNF)\nPlease enter existing file name..");
    }

    //search option
    void searchFile(String fname) {
        String[] list = file_name.list();
        for (String file: list) {
            if (fname.equals(file)) {
                System.out.println("FOUND : File " + fname + " exists at " + file_name);
                return;
            }
        }
        System.out.println("File NOT found (FNF)\nPlease enter existing file name..");
    }

   
    //main menu options
    void showMainMenu() {
        System.out.println(MAIN_MENU_STRING);
        try{
            Scanner scanner = new Scanner(System.in);
            int option = scanner.nextInt();
            switch (option){
                case 1 : {
                	showFilesAscendingOrder();
                	showMainMenu();
                	break;
                }
                case 2 : {
                    showNestedMenu();
                    break;
                }
                case 3 : {
                    System.out.println("Thanks...");
                    System.exit(0);
                    break;
                }
                default: {
                	showMainMenu();
                	
                }
            }
        }
        catch (Exception e){
            System.out.println("Please Enter 1, 2 Or 3");
            showMainMenu();
        }
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(WELCOME_STRING);
		Proj proj=new Proj();
		proj.showMainMenu();
		
	}

}
